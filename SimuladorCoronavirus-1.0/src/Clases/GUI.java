/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Clases;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author prado
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        try{
            initComponents();
        }
        catch(Exception e)
        {
            
        }
        paises = new HashMap<>();
        try {
            this.IP.setText(InetAddress.getLocalHost().getHostAddress());
        } catch (UnknownHostException ex) {
            Logger.getLogger(Broker.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Creo un broker para inciciar el programa
        Broker br = new Broker(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelBroker = new javax.swing.JLabel();
        labelIp = new javax.swing.JLabel();
        IP = new javax.swing.JLabel();
        labelPaises = new javax.swing.JLabel();
        scrollTabla = new javax.swing.JScrollPane();
        tablaPaises = new javax.swing.JTable();
        labelPaises1 = new javax.swing.JLabel();
        scrollEstado = new javax.swing.JScrollPane();
        textAreaEstado = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelBroker.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelBroker.setText("Broker");

        labelIp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        labelIp.setText("IP:");

        IP.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        IP.setText("LocalHost");

        labelPaises.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        labelPaises.setText("Paises:");

        tablaPaises.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Población", "Aislados", "Sanos Comunes", "Sanos Vulnerables", "Infectados Comunes", "Infectados Vulnerables"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollTabla.setViewportView(tablaPaises);

        labelPaises1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        labelPaises1.setText("Estado del programa:");

        textAreaEstado.setEditable(false);
        textAreaEstado.setColumns(20);
        textAreaEstado.setRows(5);
        scrollEstado.setViewportView(textAreaEstado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollEstado)
                    .addComponent(scrollTabla)
                    .addComponent(labelPaises)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelBroker)
                        .addGap(659, 659, 659)
                        .addComponent(labelIp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IP, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelPaises1))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBroker)
                    .addComponent(labelIp)
                    .addComponent(IP))
                .addGap(20, 20, 20)
                .addComponent(labelPaises)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelPaises1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IP;
    private javax.swing.JLabel labelBroker;
    private javax.swing.JLabel labelIp;
    private javax.swing.JLabel labelPaises;
    private javax.swing.JLabel labelPaises1;
    private javax.swing.JScrollPane scrollEstado;
    private javax.swing.JScrollPane scrollTabla;
    private javax.swing.JTable tablaPaises;
    private javax.swing.JTextArea textAreaEstado;
    // End of variables declaration//GEN-END:variables

    public HashMap<String,Pais> paises;
    
    public void llenarPaises(ArrayList<Pais> paises)
    {
        try{
            for (Pais p : paises) 
            {
                this.paises.put(p.getNomPais(), p);
            }

            mostrar();
        }catch(Exception e)
        {
            
        }
    }
    
    public void actualizarPais(Pais p)
    {
        try{
            paises.replace(p.getNomPais(), p);

            mostrar();
            
        }
        catch(Exception e)
        {
            
        }
    }
    
    public void eliminarPais(Pais p)
    {
        try{
            paises.remove(p.getNomPais());
            mostrar(); 
        }
        catch(Exception e)
        {
            
        }

    }
    
    public void agregarPais(Pais p)
    {
        try{
            paises.put(p.getNomPais(), p);
        
            mostrar();
        }
        catch(Exception e)
        {
            
        }
        
    }

    public void mostrar()
    {
        try
        {
            Object matriz[][] = new Object[paises.size()][7];

            ArrayList<Pais> aux = new ArrayList<>(paises.values());
        
            int i = 0;
            for (Pais p : aux)
            {
                matriz[i][0] = p.getNomPais();
                matriz[i][1] = p.getPoblacion();
                matriz[i][2] = p.poblacionAislamiento;
                matriz[i][3] = p.poblacionSana;
                matriz[i][4] = p.poblacionSanaVulnerable;
                matriz[i][5] = p.poblacionInfectada;
                matriz[i][6] = p.poblacionInfectadaVulnerable;
                i++;
            }
            
            DefaultTableModel tm = new javax.swing.table.DefaultTableModel(
                matriz,
                new String [] {
                    "Nombre", "Población", "Aislados", "Sanos Comunes", "Sanos Vulnerables", "Infectados Comunes", "Infectados Vulnerables"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            };
        
            tablaPaises.setModel(tm);
        }
        catch(Exception e)
        {
            
        }
    }
    
    public void escribirEstado(String s)
    {
        this.textAreaEstado.append(s+"\n");
    }
    
}
